//
//  Copyright (c) 2020 gematik GmbH
//  
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//  
//     http://www.apache.org/licenses/LICENSE-2.0
//  
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

//
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//

import Foundation
import XMLTools

// MARK: - Generated file, do not edit. Any edits of this file will be overwritten and thus discarded.
public class NFD_Diagnosen {
    
    public static let namespacePrefix: String? = "NFD"
    public static let namespaceUri: String? = "http://ws.gematik.de/fa/nfds/NFD_Document/v1.3"
    
    // attributes:
    
    // elements:
    public var Diagnose_Code: String?
    public var Diagnose_Text: String
    public var Diagnose_Zeitpunkt: String?
    public var Diagnosesicherheit: NFD_DiagnosesicherheitEnum?
    public var Seitenlokalisation: NFD_SeitenlokalisationEnum?
    public var Diagnose_Code_System: NFD_Diagnose_Code_System?
    public var diagnostiziert_indiziert: NFD_Diagnose_Indikation?
    
    // default Constructor
    public init() {
        
        self.Diagnose_Code = nil
        self.Diagnose_Text = String()
        self.Diagnose_Zeitpunkt = nil
        self.Diagnosesicherheit = nil
        self.Seitenlokalisation = nil
        self.Diagnose_Code_System = nil
        self.diagnostiziert_indiziert = nil
        
    }
    
    // copy Constructor
    public init(_ _NFD_Diagnosen: NFD_Diagnosen ) {
        
        self.Diagnose_Code = _NFD_Diagnosen.Diagnose_Code
        self.Diagnose_Text = _NFD_Diagnosen.Diagnose_Text
        self.Diagnose_Zeitpunkt = _NFD_Diagnosen.Diagnose_Zeitpunkt
        self.Diagnosesicherheit = _NFD_Diagnosen.Diagnosesicherheit
        self.Seitenlokalisation = _NFD_Diagnosen.Seitenlokalisation
        self.Diagnose_Code_System = _NFD_Diagnosen.Diagnose_Code_System
        self.diagnostiziert_indiziert = _NFD_Diagnosen.diagnostiziert_indiziert
        
    }
    
    public class func deserialize(_ infoset: Infoset) -> NFD_Diagnosen {
        
        let _NFD_Diagnosen = NFD_Diagnosen()
        
        let uriDiagnose_Code = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDiagnose_Code = QName("Diagnose_Code", uri: uriDiagnose_Code)
        _NFD_Diagnosen.Diagnose_Code = String?.deserialize(infoset.select(qNameDiagnose_Code))
        
        let uriDiagnose_Text = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDiagnose_Text = QName("Diagnose_Text", uri: uriDiagnose_Text)
        _NFD_Diagnosen.Diagnose_Text = String.deserialize(infoset.select(qNameDiagnose_Text))
        
        let uriDiagnose_Zeitpunkt = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDiagnose_Zeitpunkt = QName("Diagnose_Zeitpunkt", uri: uriDiagnose_Zeitpunkt)
        _NFD_Diagnosen.Diagnose_Zeitpunkt = String?.deserialize(infoset.select(qNameDiagnose_Zeitpunkt))
        
        let uriDiagnosesicherheit = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDiagnosesicherheit = QName("Diagnosesicherheit", uri: uriDiagnosesicherheit)
        _NFD_Diagnosen.Diagnosesicherheit = NFD_DiagnosesicherheitEnum.deserialize(infoset.select(qNameDiagnosesicherheit))
        
        let uriSeitenlokalisation = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameSeitenlokalisation = QName("Seitenlokalisation", uri: uriSeitenlokalisation)
        _NFD_Diagnosen.Seitenlokalisation = NFD_SeitenlokalisationEnum.deserialize(infoset.select(qNameSeitenlokalisation))
        
        let uriDiagnose_Code_System = NFD_Diagnose_Code_System.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDiagnose_Code_System = QName("Diagnose_Code_System", uri: uriDiagnose_Code_System)
        _NFD_Diagnosen.Diagnose_Code_System = NFD_Diagnose_Code_System?.deserialize(infoset.select(qNameDiagnose_Code_System))
        
        let uridiagnostiziert_indiziert = NFD_Diagnose_Indikation.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNamediagnostiziert_indiziert = QName("diagnostiziert_indiziert", uri: uridiagnostiziert_indiziert)
        _NFD_Diagnosen.diagnostiziert_indiziert = NFD_Diagnose_Indikation?.deserialize(infoset.select(qNamediagnostiziert_indiziert))
        
        return _NFD_Diagnosen
    }
}

extension Optional where Wrapped == NFD_Diagnosen {
    public static func deserialize(_ infoset: Infoset) -> NFD_Diagnosen? {
        if infoset.count == 0 {
            return nil
        } else {
            return NFD_Diagnosen.deserialize(infoset)
        }
    }
}

extension Array where Element: NFD_Diagnosen {
    public var namespaceUri: String? {
        get {
            return NFD_Diagnosen.namespaceUri
        }
    }
    
    public static func deserialize(_ infoset: Infoset) -> [NFD_Diagnosen] {
        return infoset.map { (element: Infoset) in
        NFD_Diagnosen.deserialize(element)
    }
}
}

// utility functions
fileprivate extension String {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> String {
        return infoset.text
    }
}

fileprivate extension Optional where Wrapped == String {
    static func deserialize(_ infoset: Infoset) -> String? {
        if infoset.count == 0 {
            return nil
        } else {
            return String.deserialize(infoset)
        }
    }
}

fileprivate extension Int {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Int {
        guard let ret = Int(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Int {
    static func deserialize(_ infoset: Infoset) -> Int? {
        if infoset.count == 0 {
            return nil
        } else {
            return Int.deserialize(infoset)
        }
    }
}

fileprivate extension Double {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Double {
        guard let ret = Double(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Double {
    static func deserialize(_ infoset: Infoset) -> Double? {
        if infoset.count == 0 {
            return nil
        } else {
            return Double.deserialize(infoset)
        }
    }
}

