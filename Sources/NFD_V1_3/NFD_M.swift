//
//  Copyright (c) 2020 gematik GmbH
//  
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//  
//     http://www.apache.org/licenses/LICENSE-2.0
//  
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

//
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//

import Foundation
import XMLTools

// MARK: - Generated file, do not edit. Any edits of this file will be overwritten and thus discarded.
public class NFD_M: NFD_MeTyp {
    
    // attributes:
    public var p: String?
    public var ps: String?
    public var a: String?
    public var f: String?
    public var fs: String?
    public var fd: String?
    public var m: String?
    public var d: String?
    public var v: String?
    public var h: String?
    public var t: String?
    public var du: String?
    public var dus: String?
    public var dud: String?
    public var i: String?
    
    // elements:
    public var W: [NFD_W]
    
    // default Constructor
    override public init() {
        
        self.p = nil
        self.ps = nil
        self.a = nil
        self.f = nil
        self.fs = nil
        self.fd = nil
        self.m = nil
        self.d = nil
        self.v = nil
        self.h = nil
        self.t = nil
        self.du = nil
        self.dus = nil
        self.dud = nil
        self.i = nil
        
        self.W = [NFD_W]()
        
        super.init()
        
    }
    
    // copy Constructor
    public init(_ _NFD_M: NFD_M ) {
        
        self.p = _NFD_M.p
        self.ps = _NFD_M.ps
        self.a = _NFD_M.a
        self.f = _NFD_M.f
        self.fs = _NFD_M.fs
        self.fd = _NFD_M.fd
        self.m = _NFD_M.m
        self.d = _NFD_M.d
        self.v = _NFD_M.v
        self.h = _NFD_M.h
        self.t = _NFD_M.t
        self.du = _NFD_M.du
        self.dus = _NFD_M.dus
        self.dud = _NFD_M.dud
        self.i = _NFD_M.i
        
        self.W = _NFD_M.W
        
        super.init(_NFD_M)
        
    }
    
    // Constructor from superclass
    override public init(_ _NFD_MeTyp: NFD_MeTyp) {
        
        self.p = nil
        self.ps = nil
        self.a = nil
        self.f = nil
        self.fs = nil
        self.fd = nil
        self.m = nil
        self.d = nil
        self.v = nil
        self.h = nil
        self.t = nil
        self.du = nil
        self.dus = nil
        self.dud = nil
        self.i = nil
        
        self.W = [NFD_W]()
        
        super.init(_NFD_MeTyp)
    }
    
    override  public class func deserialize(_ infoset: Infoset) -> NFD_M {
        
        let _NFD_M = NFD_M(NFD_MeTyp.deserialize(infoset))
        
        _NFD_M.p = String?.deserialize(infoset.attr("p"))
        _NFD_M.ps = String?.deserialize(infoset.attr("ps"))
        _NFD_M.a = String?.deserialize(infoset.attr("a"))
        _NFD_M.f = String?.deserialize(infoset.attr("f"))
        _NFD_M.fs = String?.deserialize(infoset.attr("fs"))
        _NFD_M.fd = String?.deserialize(infoset.attr("fd"))
        _NFD_M.m = String?.deserialize(infoset.attr("m"))
        _NFD_M.d = String?.deserialize(infoset.attr("d"))
        _NFD_M.v = String?.deserialize(infoset.attr("v"))
        _NFD_M.h = String?.deserialize(infoset.attr("h"))
        _NFD_M.t = String?.deserialize(infoset.attr("t"))
        _NFD_M.du = String?.deserialize(infoset.attr("du"))
        _NFD_M.dus = String?.deserialize(infoset.attr("dus"))
        _NFD_M.dud = String?.deserialize(infoset.attr("dud"))
        _NFD_M.i = String?.deserialize(infoset.attr("i"))
        
        let uriW = [NFD_W]().namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameW = QName("W", uri: uriW)
        _NFD_M.W = [NFD_W].deserialize(infoset.select(qNameW))
        
        return _NFD_M
    }
}

extension Optional where Wrapped == NFD_M {
    public static func deserialize(_ infoset: Infoset) -> NFD_M? {
        if infoset.count == 0 {
            return nil
        } else {
            return NFD_M.deserialize(infoset)
        }
    }
}

extension Array where Element: NFD_M {
    public var namespaceUri: String? {
        get {
            return NFD_M.namespaceUri
        }
    }
    
    public static func deserialize(_ infoset: Infoset) -> [NFD_M] {
        return infoset.map { (element: Infoset) in
        NFD_M.deserialize(element)
    }
}
}

// utility functions
fileprivate extension String {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> String {
        return infoset.text
    }
}

fileprivate extension Optional where Wrapped == String {
    static func deserialize(_ infoset: Infoset) -> String? {
        if infoset.count == 0 {
            return nil
        } else {
            return String.deserialize(infoset)
        }
    }
}

fileprivate extension Int {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Int {
        guard let ret = Int(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Int {
    static func deserialize(_ infoset: Infoset) -> Int? {
        if infoset.count == 0 {
            return nil
        } else {
            return Int.deserialize(infoset)
        }
    }
}

fileprivate extension Double {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Double {
        guard let ret = Double(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Double {
    static func deserialize(_ infoset: Infoset) -> Double? {
        if infoset.count == 0 {
            return nil
        } else {
            return Double.deserialize(infoset)
        }
    }
}

