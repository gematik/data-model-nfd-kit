//
//  Copyright (c) 2020 gematik GmbH
//  
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//  
//     http://www.apache.org/licenses/LICENSE-2.0
//  
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

//
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//

import Foundation
import XMLTools

// MARK: - Generated file, do not edit. Any edits of this file will be overwritten and thus discarded.
public class NFDM_Versicherter {
    
    public static let namespacePrefix: String? = "NFDM"
    public static let namespaceUri: String? = "http://ws.gematik.de/fa/nfds/common/NFDM_Common/v1.0"
    
    // attributes:
    
    // elements:
    public var Versicherten_ID: String
    public var Geburtsdatum: String
    public var Vorname: String
    public var Nachname: String
    public var Vorsatzwort: String?
    public var Namenszusatz: String?
    public var Titel: String?
    public var Geschlecht: String
    
    // default Constructor
    public init() {
        
        self.Versicherten_ID = String()
        self.Geburtsdatum = String()
        self.Vorname = String()
        self.Nachname = String()
        self.Vorsatzwort = nil
        self.Namenszusatz = nil
        self.Titel = nil
        self.Geschlecht = String()
        
    }
    
    // copy Constructor
    public init(_ _NFDM_Versicherter: NFDM_Versicherter ) {
        
        self.Versicherten_ID = _NFDM_Versicherter.Versicherten_ID
        self.Geburtsdatum = _NFDM_Versicherter.Geburtsdatum
        self.Vorname = _NFDM_Versicherter.Vorname
        self.Nachname = _NFDM_Versicherter.Nachname
        self.Vorsatzwort = _NFDM_Versicherter.Vorsatzwort
        self.Namenszusatz = _NFDM_Versicherter.Namenszusatz
        self.Titel = _NFDM_Versicherter.Titel
        self.Geschlecht = _NFDM_Versicherter.Geschlecht
        
    }
    
    public class func deserialize(_ infoset: Infoset) -> NFDM_Versicherter {
        
        let _NFDM_Versicherter = NFDM_Versicherter()
        
        let uriVersicherten_ID = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameVersicherten_ID = QName("Versicherten_ID", uri: uriVersicherten_ID)
        _NFDM_Versicherter.Versicherten_ID = String.deserialize(infoset.select(qNameVersicherten_ID))
        
        let uriGeburtsdatum = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameGeburtsdatum = QName("Geburtsdatum", uri: uriGeburtsdatum)
        _NFDM_Versicherter.Geburtsdatum = String.deserialize(infoset.select(qNameGeburtsdatum))
        
        let uriVorname = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameVorname = QName("Vorname", uri: uriVorname)
        _NFDM_Versicherter.Vorname = String.deserialize(infoset.select(qNameVorname))
        
        let uriNachname = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameNachname = QName("Nachname", uri: uriNachname)
        _NFDM_Versicherter.Nachname = String.deserialize(infoset.select(qNameNachname))
        
        let uriVorsatzwort = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameVorsatzwort = QName("Vorsatzwort", uri: uriVorsatzwort)
        _NFDM_Versicherter.Vorsatzwort = String?.deserialize(infoset.select(qNameVorsatzwort))
        
        let uriNamenszusatz = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameNamenszusatz = QName("Namenszusatz", uri: uriNamenszusatz)
        _NFDM_Versicherter.Namenszusatz = String?.deserialize(infoset.select(qNameNamenszusatz))
        
        let uriTitel = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameTitel = QName("Titel", uri: uriTitel)
        _NFDM_Versicherter.Titel = String?.deserialize(infoset.select(qNameTitel))
        
        let uriGeschlecht = String.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameGeschlecht = QName("Geschlecht", uri: uriGeschlecht)
        _NFDM_Versicherter.Geschlecht = String.deserialize(infoset.select(qNameGeschlecht))
        
        return _NFDM_Versicherter
    }
}

extension Optional where Wrapped == NFDM_Versicherter {
    public static func deserialize(_ infoset: Infoset) -> NFDM_Versicherter? {
        if infoset.count == 0 {
            return nil
        } else {
            return NFDM_Versicherter.deserialize(infoset)
        }
    }
}

extension Array where Element: NFDM_Versicherter {
    public var namespaceUri: String? {
        get {
            return NFDM_Versicherter.namespaceUri
        }
    }
    
    public static func deserialize(_ infoset: Infoset) -> [NFDM_Versicherter] {
        return infoset.map { (element: Infoset) in
        NFDM_Versicherter.deserialize(element)
    }
}
}

// utility functions
fileprivate extension String {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> String {
        return infoset.text
    }
}

fileprivate extension Optional where Wrapped == String {
    static func deserialize(_ infoset: Infoset) -> String? {
        if infoset.count == 0 {
            return nil
        } else {
            return String.deserialize(infoset)
        }
    }
}

fileprivate extension Int {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Int {
        guard let ret = Int(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Int {
    static func deserialize(_ infoset: Infoset) -> Int? {
        if infoset.count == 0 {
            return nil
        } else {
            return Int.deserialize(infoset)
        }
    }
}

fileprivate extension Double {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Double {
        guard let ret = Double(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Double {
    static func deserialize(_ infoset: Infoset) -> Double? {
        if infoset.count == 0 {
            return nil
        } else {
            return Double.deserialize(infoset)
        }
    }
}

